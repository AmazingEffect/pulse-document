---
# Namespace 정의
apiVersion: v1
kind: Namespace
metadata:
  name: kafka-system
---
# Kafka ConfigMap - 브로커 초기화 스크립트 포함
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: kafka-system
data:
  setup.sh: |
    #!/bin/bash
    set -e

    # 브로커 ID 및 노드 ID 설정
    ID="${HOSTNAME##*-}"
    export KAFKA_CFG_BROKER_ID=$ID
    export KAFKA_CFG_NODE_ID=$ID

    # Pod의 ordinal 추출 (0, 1, 2)
    ORDINAL=${HOSTNAME##*-}

    # 외부 포트 매핑 (각 브로커에 고유한 NodePort 할당)
    case "$ORDINAL" in
      "0")
        EXTERNAL_PORT=30090
        ;;
      "1")
        EXTERNAL_PORT=30091
        ;;
      "2")
        EXTERNAL_PORT=30092
        ;;
      *)
        echo "Invalid Pod ordinal: $ORDINAL"
        exit 1
        ;;
    esac

    # 외부 리스너 설정 (Docker Desktop에서는 localhost 사용)
    NODE_IP=localhost
    EXTERNAL_LISTENER="EXTERNAL://${NODE_IP}:${EXTERNAL_PORT}"

    # 내부 리스너 설정
    INTERNAL_LISTENER="PLAINTEXT://${HOSTNAME}.kafka-headless.kafka-system.svc.cluster.local:9092"

    # Advertised Listeners 설정
    export KAFKA_CFG_ADVERTISED_LISTENERS="${INTERNAL_LISTENER},${EXTERNAL_LISTENER}"

    echo "ADVERTISED_LISTENERS set to: ${KAFKA_CFG_ADVERTISED_LISTENERS}"

    exec /entrypoint.sh /run.sh
---
# Kafka Headless Service - 내부 통신용
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: kafka-system
spec:
  clusterIP: None
  ports:
    - name: plaintext
      port: 9092
      targetPort: 9092
    - name: controller
      port: 9093
      targetPort: 9093
    - name: external
      port: 10000
      targetPort: 10000
  selector:
    app: kafka
---
# Kafka External Service - Pod 0
apiVersion: v1
kind: Service
metadata:
  name: kafka-external-0
  namespace: kafka-system
spec:
  type: NodePort
  ports:
    - name: external
      port: 10000
      targetPort: 10000
      nodePort: 30090
  selector:
    app: kafka
    statefulset.kubernetes.io/pod-name: kafka-0
---
# Kafka External Service - Pod 1
apiVersion: v1
kind: Service
metadata:
  name: kafka-external-1
  namespace: kafka-system
spec:
  type: NodePort
  ports:
    - name: external
      port: 10000
      targetPort: 10000
      nodePort: 30091
  selector:
    app: kafka
    statefulset.kubernetes.io/pod-name: kafka-1
---
# Kafka External Service - Pod 2
apiVersion: v1
kind: Service
metadata:
  name: kafka-external-2
  namespace: kafka-system
spec:
  type: NodePort
  ports:
    - name: external
      port: 10000
      targetPort: 10000
      nodePort: 30092
  selector:
    app: kafka
    statefulset.kubernetes.io/pod-name: kafka-2
---
# Kafka StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka-system
spec:
  serviceName: kafka-headless
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: bitnami/kafka:3.7.0
          command: ["/bin/bash", "/config/setup.sh"]
          ports:
            - containerPort: 9092
              name: plaintext
            - containerPort: 9093
              name: controller
            - containerPort: 10000
              name: external
          env:
            - name: KAFKA_ENABLE_KRAFT
              value: "yes"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: "controller,broker"
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: "HsDBs9l6UUmQq7Y5E6bNlw"
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: "0@kafka-0.kafka-headless.kafka-system.svc.cluster.local:9093,1@kafka-1.kafka-headless.kafka-system.svc.cluster.local:9093,2@kafka-2.kafka-headless.kafka-system.svc.cluster.local:9093"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:10000"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "2"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "2"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "2"
          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami/kafka
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: kafka-config
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi
---
# Kafka UI Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: kafka-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
        - name: kafka-ui
          image: provectuslabs/kafka-ui:latest
          ports:
            - containerPort: 8080
          env:
            - name: KAFKA_CLUSTERS_0_NAME
              value: "Local-Kraft-Cluster"
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: "kafka-0.kafka-headless.kafka-system.svc.cluster.local:9092,kafka-1.kafka-headless.kafka-system.svc.cluster.local:9092,kafka-2.kafka-headless.kafka-system.svc.cluster.local:9092"
            - name: DYNAMIC_CONFIG_ENABLED
              value: "true"
            - name: KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED
              value: "true"
            - name: KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED
              value: "true"
---
# Kafka UI Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui
  namespace: kafka-system
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30080
  selector:
    app: kafka-ui